#!/bin/sh

# Security Report Generator for MediMind DAST Results
# This script analyzes ZAP scan results and generates a comprehensive security report

set -e

REPORTS_DIR="/reports"
SUMMARY_FILE="$REPORTS_DIR/security_summary.md"
DETAILED_REPORT="$REPORTS_DIR/detailed_security_report.md"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "🔒 Generating Security Report for MediMind..."

# Create reports directory if it doesn't exist
mkdir -p "$REPORTS_DIR"

# Initialize counters
total_issues=0
critical_issues=0
high_issues=0
medium_issues=0
low_issues=0
info_issues=0

# Function to analyze JSON report
analyze_report() {
    local json_file=$1
    local report_name=$2
    
    if [ -f "$json_file" ]; then
        echo "📊 Analyzing $report_name..."
        
        # Count issues by severity
        local critical=$(jq -r '.alerts[] | select(.risk == "High" or .risk == "Critical") | .name' "$json_file" 2>/dev/null | wc -l)
        local high=$(jq -r '.alerts[] | select(.risk == "High") | .name' "$json_file" 2>/dev/null | wc -l)
        local medium=$(jq -r '.alerts[] | select(.risk == "Medium") | .name' "$json_file" 2>/dev/null | wc -l)
        local low=$(jq -r '.alerts[] | select(.risk == "Low") | .name' "$json_file" 2>/dev/null | wc -l)
        local info=$(jq -r '.alerts[] | select(.risk == "Informational") | .name' "$json_file" 2>/dev/null | wc -l)
        
        critical_issues=$((critical_issues + critical))
        high_issues=$((high_issues + high))
        medium_issues=$((medium_issues + medium))
        low_issues=$((low_issues + low))
        info_issues=$((info_issues + info))
        
        echo "  - Critical: $critical"
        echo "  - High: $high"
        echo "  - Medium: $medium"
        echo "  - Low: $low"
        echo "  - Info: $info"
    fi
}

# Analyze all JSON reports
analyze_report "$REPORTS_DIR/baseline_report.json" "Baseline Scan"
analyze_report "$REPORTS_DIR/full_scan_report.json" "Full Scan"
analyze_report "$REPORTS_DIR/api_scan_report.json" "API Scan"

total_issues=$((critical_issues + high_issues + medium_issues + low_issues + info_issues))

# Generate summary report
cat > "$SUMMARY_FILE" << EOF
# 🔒 MediMind Security Scan Summary

**Generated:** $(date)  
**Scan Duration:** $(date -u +%H:%M:%S)  
**Total Issues Found:** $total_issues

## 📊 Issue Summary

| Severity | Count | Status |
|----------|-------|--------|
| 🔴 Critical | $critical_issues | $(if [ $critical_issues -gt 0 ]; then echo "❌ BLOCKING"; else echo "✅ PASS"; fi) |
| 🟠 High | $high_issues | $(if [ $high_issues -gt 0 ]; then echo "⚠️  REVIEW"; else echo "✅ PASS"; fi) |
| 🟡 Medium | $medium_issues | $(if [ $medium_issues -gt 0 ]; then echo "⚠️  REVIEW"; else echo "✅ PASS"; fi) |
| 🟢 Low | $low_issues | ✅ PASS |
| 🔵 Info | $info_issues | ✅ PASS |

## 🎯 Security Assessment

$(if [ $critical_issues -gt 0 ]; then
    echo "❌ **CRITICAL ISSUES DETECTED**"
    echo "Deployment is **BLOCKED** due to critical security vulnerabilities."
    echo "Please address all critical issues before proceeding with deployment."
elif [ $high_issues -gt 0 ]; then
    echo "⚠️  **HIGH SEVERITY ISSUES DETECTED**"
    echo "Deployment is **ALLOWED** but high severity issues should be reviewed."
    echo "Consider addressing these issues before production deployment."
else
    echo "✅ **NO CRITICAL OR HIGH SEVERITY ISSUES**"
    echo "Security scan passed. Deployment can proceed."
fi)

## 📋 Reports Available

- **Baseline Scan:** baseline_report.html
- **Full Scan:** full_scan_report.html
- **API Scan:** api_scan_report.html
- **Detailed Analysis:** detailed_security_report.md

## 🚀 Next Steps

1. **Review HTML Reports:** Open the HTML reports for detailed vulnerability information
2. **Address Critical Issues:** Fix all critical and high severity issues
3. **Re-scan:** Run the DAST scan again after fixes
4. **Documentation:** Update security documentation with findings

## 🔧 Scan Configuration

- **Frontend URL:** ${FRONTEND_URL:-Not specified}
- **Backend URL:** ${BACKEND_URL:-Not specified}
- **Scan Tool:** OWASP ZAP
- **Scan Type:** Dynamic Application Security Testing (DAST)

---
*This report was automatically generated by the MediMind DAST pipeline.*
EOF

# Generate detailed report
cat > "$DETAILED_REPORT" << EOF
# 🔍 Detailed Security Analysis Report

## Executive Summary

This report provides a detailed analysis of the security vulnerabilities found during the DAST scan of the MediMind application.

**Scan Date:** $(date)  
**Total Vulnerabilities:** $total_issues

## Vulnerability Breakdown

### Critical Issues ($critical_issues)
$(if [ $critical_issues -gt 0 ]; then
    echo "Critical vulnerabilities require immediate attention and block deployment."
else
    echo "✅ No critical vulnerabilities found."
fi)

### High Severity Issues ($high_issues)
$(if [ $high_issues -gt 0 ]; then
    echo "High severity issues should be addressed before production deployment."
else
    echo "✅ No high severity vulnerabilities found."
fi)

### Medium Severity Issues ($medium_issues)
$(if [ $medium_issues -gt 0 ]; then
    echo "Medium severity issues should be reviewed and addressed based on risk assessment."
else
    echo "✅ No medium severity vulnerabilities found."
fi)

### Low Severity Issues ($low_issues)
$(if [ $low_issues -gt 0 ]; then
    echo "Low severity issues are informational and may not require immediate action."
else
    echo "✅ No low severity vulnerabilities found."
fi)

## Technical Details

### Scan Coverage
- **Frontend Application:** ${FRONTEND_URL:-Not scanned}
- **Backend API:** ${BACKEND_URL:-Not scanned}
- **API Documentation:** ${API_URL:-Not available}

### Scan Types Performed
1. **Baseline Scan:** Quick scan for common vulnerabilities
2. **Full Scan:** Comprehensive vulnerability assessment
3. **API Scan:** REST API security testing

## Recommendations

### Immediate Actions (Critical & High)
$(if [ $critical_issues -gt 0 ] || [ $high_issues -gt 0 ]; then
    echo "1. Review all critical and high severity findings"
    echo "2. Implement security fixes for identified vulnerabilities"
    echo "3. Re-run DAST scan to verify fixes"
    echo "4. Update security documentation"
else
    echo "No immediate actions required for critical or high severity issues."
fi)

### Medium Term Actions (Medium)
$(if [ $medium_issues -gt 0 ]; then
    echo "1. Assess risk level of medium severity issues"
    echo "2. Plan remediation for high-risk medium issues"
    echo "3. Document risk acceptance for low-risk medium issues"
else
    echo "No medium severity issues to address."
fi)

### Long Term Actions
1. **Continuous Monitoring:** Implement regular DAST scans
2. **Security Training:** Ensure development team is aware of security best practices
3. **Code Review:** Integrate security review into development process
4. **Dependency Management:** Regular updates of dependencies (if any)

## Compliance Notes

- **DAST Requirement:** ✅ Implemented
- **SCA Requirement:** ❌ Not required (no open source dependencies)
- **Security Gates:** $(if [ $critical_issues -gt 0 ]; then echo "❌ FAILED"; else echo "✅ PASSED"; fi)

---
*Generated by MediMind Security Pipeline*
EOF

echo "✅ Security reports generated successfully!"
echo "📁 Reports location: $REPORTS_DIR"
echo "📊 Summary: $total_issues total issues found"
echo "  - Critical: $critical_issues"
echo "  - High: $high_issues"
echo "  - Medium: $medium_issues"
echo "  - Low: $low_issues"
echo "  - Info: $info_issues"

# Exit with appropriate code based on critical issues
if [ $critical_issues -gt 0 ]; then
    echo "❌ Critical issues found - deployment should be blocked"
    exit 1
elif [ $high_issues -gt 0 ]; then
    echo "⚠️  High severity issues found - review recommended"
    exit 0
else
    echo "✅ No critical or high severity issues - deployment can proceed"
    exit 0
fi
