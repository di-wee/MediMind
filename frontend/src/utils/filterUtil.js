//filteredFields: ['isActive', 'missedDose']
// dataList - medication dataset/obj
//label map = { isActive: { true: 'Active', false: 'Inactive' } }
export function getDynamicFilterOptions(
	dataList,
	filteredFields,
	labelMap = {}
) {
	return filteredFields.flatMap((field) => {
		//getting all the unique values from the fields of the dataList
		// Set {true}
		const uniqueVals = [...new Set(dataList.map((item) => item[field]))];

		//mapping the values based off the label map to get the relabelled form
		return uniqueVals.map((value) => {
			const label =
				labelMap[field]?.[value] !== undefined
					? labelMap[field][value]
					: String(value);

			return { label, field, value };
		});
	});
}

//dataList - full dataset
//filterOptions - generated by getDynamicFilterOptions [ { label: 'Active', field: 'isActive', value: true },]
//selectedLabels - the selected filter options ['Active', 'Missed']
export function applyFilter(dataList, filterOptions, selectedLabels) {
	//if none of the filter options have been selected, return the whole datalist
	if (selectedLabels.length === 0) {
		return dataList;
	}

	// { isActive: Set {true}, missedDose: Set {false} }
	const groupByField = {};

	for (const option of filterOptions) {
		if (selectedLabels.includes(option.label)) {
			if (!groupByField[option.field]) {
				groupByField[option.field] = new Set();
			}
			groupByField[option.field].add(option.value);
		}
	}

	return dataList.filter((item) => {
		//filtering list making sure that items inside list fulfill both filters
		for (const field in groupByField) {
			if (!groupByField[field].has(item[field])) {
				return false;
			}
		}

		return true;
	});
}
