name: Full Stack CI/CD with SAST & Unit Tests

on:
  push:
    branches: [main]

permissions:
  actions: read
  contents: read
  security-events: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Java 21 for Spring Boot project
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Initialize CodeQL (SAST)
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java,javascript,python

      # Build and test Java Spring Boot backend
      - name: Build & Test Spring Boot (Maven)
        working-directory: ./backend
        run: |
          mvn clean install

      # Manual build required for CodeQL Java analysis
      - name: Manual Build for CodeQL (Java)
        working-directory: ./backend
        run: |
          mvn clean compile

      # Build and test React frontend
      - name: Build & Test React Frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run test -- --watchAll=false
          npm run build

      # Install and test Python ML code
      - name: Install & Test Python ML
        working-directory: ./ml
        run: |
          pip install -r requirements.txt
          python -m unittest discover

      # Build Android Kotlin app
      - name: Build Android App
        working-directory: ./android
        run: |
          ./gradlew build

      # Run CodeQL analysis
      - name: Analyze with CodeQL
        uses: github/codeql-action/analyze@v3

      # Snyk Scan for React dependencies
      - name: Snyk Scan (React)
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --file=frontend/package.json

      # Snyk Scan for Java dependencies
      - name: Snyk Scan (Java)
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --file=backend/pom.xml
