name: 'Unit Tests & Coverage'

on:
  push:
    branches:
      - main
      - frontend-(react)
      - backend-(java-springboot)
      - android
      - machine-learning

  pull_request:
    branches:
      - main
      - frontend-(react)
      - backend-(java-springboot)
      - android
      - machine-learning
      - demo/*

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ---------------------
      # Set up Java 21 for backend tests
      # ---------------------
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # Prepare artifact directory
      - name: Prepare Artifact Directory
        run: mkdir -p artifacts/test-coverage

      # ---------------------
      # Backend (Java) Tests & Coverage
      # ---------------------
      - name: Run Backend Tests & Generate Coverage
        working-directory: ./backend
        run: |
          # Run tests and generate JaCoCo coverage report
          mvn clean test jacoco:report
          # Copy JaCoCo reports to artifacts
          cp -r target/site/jacoco/* ../artifacts/test-coverage/backend/
          # Generate test summary
          echo "=== Backend Test Summary ===" > ../artifacts/test-coverage/backend/test-summary.txt
          echo "Date: $(date)" >> ../artifacts/test-coverage/backend/test-summary.txt
          echo "Java Version: $(java -version 2>&1 | head -n 1)" >> ../artifacts/test-coverage/backend/test-summary.txt
          echo "" >> ../artifacts/test-coverage/backend/test-summary.txt

          # Count test results if surefire reports exist
          if [ -d "target/surefire-reports" ]; then
            TOTAL_TESTS=$(find target/surefire-reports -name "*.txt" -exec grep -l "Tests run:" {} \; | wc -l)
            echo "Total test classes: $TOTAL_TESTS" >> ../artifacts/test-coverage/backend/test-summary.txt
            
            # Count passed/failed tests
            PASSED=$(find target/surefire-reports -name "*.txt" -exec grep "Tests run:" {} \; | awk '{sum += $3} END {print sum+0}')
            FAILED=$(find target/surefire-reports -name "*.txt" -exec grep "Tests run:" {} \; | awk '{sum += $6} END {print sum+0}')
            SKIPPED=$(find target/surefire-reports -name "*.txt" -exec grep "Tests run:" {} \; | awk '{sum += $9} END {print sum+0}')
            
            echo "Tests passed: $PASSED" >> ../artifacts/test-coverage/backend/test-summary.txt
            echo "Tests failed: $FAILED" >> ../artifacts/test-coverage/backend/test-summary.txt
            echo "Tests skipped: $SKIPPED" >> ../artifacts/test-coverage/backend/test-summary.txt
            
            if [ "$FAILED" -gt 0 ]; then
              echo "❌ Some tests failed!" >> ../artifacts/test-coverage/backend/test-summary.txt
            else
              echo "✅ All tests passed!" >> ../artifacts/test-coverage/backend/test-summary.txt
            fi
          fi

      # ---------------------
      # Frontend (React) Tests
      # ---------------------
      - name: Run Frontend Tests
        working-directory: ./frontend
        run: |
          npm install
          # Run tests if test script exists
          if npm run | grep -q "test"; then
            npm test -- --coverage --watchAll=false > test-results.txt 2>&1 || true
          else
            echo "No test script defined" > test-results.txt
          fi
          # Copy test results to artifacts
          cp test-results.txt ../artifacts/test-coverage/frontend-test-results.txt

      # ---------------------
      # Android Tests
      # ---------------------
      - name: Run Android Tests
        working-directory: ./android
        run: |
          # Run unit tests
          ./gradlew test || true
          # Run instrumented tests if possible
          ./gradlew connectedAndroidTest || true
          # Copy test reports to artifacts
          if [ -d "app/build/reports/tests" ]; then
            cp -r app/build/reports/tests ../artifacts/test-coverage/android/
          fi

      # ---------------------
      # ML (Python) Tests
      # ---------------------
      - name: Run ML Tests
        working-directory: ./ml
        run: |
          pip install -r requirements.txt || true
          # Run tests if they exist
          if [ -f "test_*.py" ] || [ -d "tests" ]; then
            python -m pytest --cov=. --cov-report=html --cov-report=term-missing > test-results.txt 2>&1 || true
          else
            echo "No tests found" > test-results.txt
          fi
          # Copy test results to artifacts
          cp test-results.txt ../artifacts/test-coverage/ml-test-results.txt
          if [ -d "htmlcov" ]; then
            cp -r htmlcov ../artifacts/test-coverage/ml-coverage/
          fi

      # ---------------------
      # Upload Test Coverage Reports
      # ---------------------
      - name: Upload Test Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-reports
          path: artifacts/test-coverage/
