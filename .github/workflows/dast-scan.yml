name: DAST Security Scan

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to scan'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  dast-scan:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and start Backend
      run: |
        cd backend
        mvn clean compile
        mvn spring-boot:run -Dspring-boot.run.jvmArguments="-Dserver.port=8080" &
        echo "Waiting for backend to start..."
        sleep 30
        
    - name: Build and start Frontend
      run: |
        cd frontend
        npm ci
        npm run build
        npm run preview -- --port 3000 &
        echo "Waiting for frontend to start..."
        sleep 15
        
    - name: Run DAST Scan
      env:
        FRONTEND_URL: http://localhost:3000
        BACKEND_URL: http://localhost:8080
        SCAN_TIMEOUT: 600
      run: |
        chmod +x scripts/dast-scan.sh
        ./scripts/dast-scan.sh
        
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dast-security-reports
        path: security-reports/
        retention-days: 30
        
    - name: Check for Critical Issues
      run: |
        if [ -f "security-reports/security_summary.md" ]; then
          echo "Security scan completed. Review the reports for any issues."
          cat security-reports/security_summary.md
        else
          echo "No security summary found. Scan may have failed."
          exit 1
        fi
        
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let summary = '## üîí DAST Security Scan Results\n\n';
          
          try {
            const summaryPath = path.join('security-reports', 'security_summary.md');
            if (fs.existsSync(summaryPath)) {
              const content = fs.readFileSync(summaryPath, 'utf8');
              summary += content;
            } else {
              summary += '‚ùå Security scan failed or no summary generated.\n';
            }
          } catch (error) {
            summary += `‚ùå Error reading security report: ${error.message}\n`;
          }
          
          summary += '\n\n---\n*This comment was automatically generated by the DAST security scan.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
          
  security-gates:
    name: Security Gates
    runs-on: ubuntu-latest
    needs: dast-scan
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Download Security Reports
      uses: actions/download-artifact@v4
      with:
        name: dast-security-reports
        path: security-reports/
        
    - name: Check Security Compliance
      run: |
        echo "üîç Checking security compliance..."
        
        # Check if any critical or high severity issues exist
        critical_issues=0
        high_issues=0
        
        for json_file in security-reports/*.json; do
          if [ -f "$json_file" ]; then
            # Count critical and high severity issues
            critical=$(jq -r '.alerts[] | select(.risk == "Critical") | .name' "$json_file" 2>/dev/null | wc -l)
            high=$(jq -r '.alerts[] | select(.risk == "High") | .name' "$json_file" 2>/dev/null | wc -l)
            
            critical_issues=$((critical_issues + critical))
            high_issues=$((high_issues + high))
          fi
        done
        
        echo "Found $critical_issues critical and $high_issues high severity issues"
        
        # Fail if critical issues found
        if [ "$critical_issues" -gt 0 ]; then
          echo "‚ùå CRITICAL: $critical_issues critical security issues found. Deployment blocked."
          echo "Please review and fix these issues before merging."
          exit 1
        fi
        
        # Warn if high issues found but don't block
        if [ "$high_issues" -gt 0 ]; then
          echo "‚ö†Ô∏è  WARNING: $high_issues high severity issues found."
          echo "Consider addressing these issues before deployment."
        else
          echo "‚úÖ No critical or high severity issues found. Security gates passed."
        fi
